<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql触发器]]></title>
    <url>%2F2018%2F04%2F30%2Fmysql%E8%A7%A6%E5%8F%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[mysql 触发器标签（空格分隔）： sql mysql 触发器（不如oracle，少用）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455delimiter || -- mysql 默认结束符号是分号，当你在写触发器或者存储过程时有分号出现，会中止转而执行 DROP TRIGGERIF EXISTS updateSellState||-- 删除同名的触发器， -- CREATE TRIGGER updateSellState AFTER UPDATE ON tbl_shop_selldetail FOR EACH ROW -- 建立触发器， mysql BUG 触发器不能对当前表操作update会递归CREATE TRIGGER updateSellState BEFORE UPDATE ON tbl_shop_selldetail FOR EACH ROW -- 建立触发器， BEGIN -- 此收费单的商品全部的付款状态都为1 （已付款），则状态未已付款，全部未付款为 0 ，其他为 2 CASEWHEN ( SELECT Count(s.flowNumber) FROM tbl_shop_selldetail AS s WHERE s.flowNumber = old.flowNumber) = ( SELECT Count(ss.flowNumber) FROM tbl_shop_selldetail AS ss WHERE ss.flowNumber = old.flowNumber AND ss.singleFeeState = 1 -- 已付款商品数目) THEN-- UPDATE tbl_shop_selldetail AS sdSET new.feeState = 1;-- WHERE sd.flowNumber = old.flowNumber ;WHEN ( SELECT Count(s.flowNumber) FROM tbl_shop_selldetail AS s WHERE s.flowNumber = old.flowNumber) = ( SELECT Count(ss.flowNumber) FROM tbl_shop_selldetail AS ss WHERE ss.flowNumber = old.flowNumber AND ss.singleFeeState = 0 -- 未付款商品统计) THEN-- UPDATE tbl_shop_selldetail AS sdSET new.feeState = 0;-- WHERE sd.flowNumber = old.flowNumber ;ELSE-- UPDATE tbl_shop_selldetail AS sdSET new.feeState = 2;-- WHERE sd.flowNumber = old.flowNumber ;END CASE;END|| delimiter ;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Marckdown simple API]]></title>
    <url>%2F2018%2F04%2F30%2FMarckdown-simple-API%2F</url>
    <content type="text"><![CDATA[Cmd Markdown 简明语法手册标签（空格分隔）： 磨刀石 1.斜体和粗体斜体 粗体 注：符号后面没有空格可任意嵌套html语法标签 2.分级标题使用 === 表示一级标题 ，使用 —表示二级标题 123456789这是一个一级标题===================这是一个二级标题---------------------### 是一个三级标题&gt;注：也可以在首行加#表示不同级别的标题（H1- H6），例如：# H1，## H2 ，### H3 3.外链使用 [描述]（链接地址）为文字增加外链接。 示例： 这是去往 本人博客的链接 4.无序列表使用 * ，+ ，- 表示无需列表 示例： 无序列表 一 无序列表 二 无序列表 三 无序列表 四 子列表 1 子列表 2 无序列表 五 子列表 子子列表 6.文字引用 野火烧不尽 ， 春风吹又生 。 7.行内代码块使用`代码`表示行内代码块。 示例：让我们聊聊html 8.代码块使用四个空格缩进表示代码块示例： 这是一个代码块，此行有四个不可见的空格。 var numbers = [] ; 9.插入图像使用![描述](图片链接地址)插入图像示例： Cmd Markdown 高阶语法手册1. 内容目录在段落中写[TOC]以显示全文的内容目录结构。 [TOC] 2.标签分类在编辑区域任意行的列首输入以下代码给文稿标签： 标签 : 数学 英语 java 或者 Tags : js 语文 3.删除线使用~~ 表示删除线 这是一段错误的文字 3.脚注使用[^keyword]表示脚注这是一个脚注^footnote的样例这是第二个脚注^footnote2的样例 5.LaTeX 公式$ 表示行内公式： 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达 $$ 表示整行公式： $$\sum_{i=1}^n a_i=0$$ $$ f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$ $$\sum^{j-1}{k=0}{\widehat{\gamma}{kj} z_k}$$ 访问MathJax 参考更多使用方法。 5.加强的代码块支持四十一种编程语言的语法高亮显示，行号显示， 非代码示例：1$ sudo apt-get install vim-gnome python示例：1234567891011@requires_authorizationdef somefunc(param1='',param2=0): '''A docstring''' if param1 &gt; param2 : # interesting print 'Greater' return (parame1 - param2) or Noneclass someClass : pass&gt;&gt;&gt; message = '''interpreter...prompt''' javascript示例：123456789101112131415/*** nth element in the fibonacci *serices.@param n &gt;= 0*/function fib(n)&#123; var a = 1 , b = 1 ; var tmp ; while (--n &gt;= 0)&#123; tmp = a; a+=b; b=temp; &#125;&#125;document.write(fib(10)); 7.流程图示例：12345678910st=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io 更多语法参考：流程图语法参考8.序列图示例1：123Alice-&gt;Bob: Hello Bob ,how are you?Note right of Bobe: Bob thinksBob--&gt;Alice: I am good thanks! 示例 212345Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrow 更多语法参考：序列图语法参考9. 甘特图甘特图内在思想简单，基本是一条线条图，横轴表示在整个期间上计划和实际的活动完成情况。它直观地标明任务计划在什么时候进行，以及实际进展与计划要求的对比。12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22,3d 可行性报告 :after a1,5d 概念验证 :5dsection 项目实施 概要设计:2016-07-05,5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 更多语法参考：甘特图语法参考10.Mermaid流程图1234A[Hard edge] --&gt;|Link text| B(Round edge)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result one]C --&gt;|Two| E[Result two] 更多语法参考：Mermaid 流程图语法参考11. Mermaid 序列图1234Alice-&gt;John: Hello John, how are you?loop every minute John--&gt;Alice: Great!end 更多语法参考：Mermaid 序列图语法参考12.表格支持 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 13.自定义型列表名词 1： 定义1（左侧有一个可见的冒号和四个不可见的空格） 代码块 2: 这是代码块的定义（左侧有一个可见的冒号和四个不见客的空格） 代码块（左侧有八个不见空格） 14.html 标签本站支持在Marckdown语法中嵌套html标签，譬如，你可以用html写一个纵横跨两行的表格： 值班人员 星期一 星期二 星期三 李强 张明 王平 15. 内嵌图标本站的图标系统对外开方，在文档中输入 即显示微博图标：上述i 标签内的 icon-weibo 以显示不同的图标，例如： 即显示人人图标： 更多的图标和玩法可以参看 font-awesome 官方网站。 16.待办事宜 TODO 列表使用带有[]或者[x](未完成或者已完成)项的列表语法撰写一个待办事宜列表，并且支持自列表嵌套以及混用Markdown语法，例如： - [ ] **Cmd Markdown 开发** - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 - [ ] 支持以 PDF 格式导出文稿 - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) - [x] 改进 LaTex 功能 - [x] 修复 LaTex 公式渲染问题 - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers) - [ ] **七月旅行准备** - [ ] 准备邮轮上需要携带的物品 - [ ] 浏览日本免税店的物品 - [x] 购买蓝宝石公主号七月一日的船票 对应显示如下待办事宜 Todo 列表： Cmd Markdown 开发 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 支持以 PDF 格式导出文稿 新增Todo列表功能 语法参考 改进 LaTex 功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 语法参考 七月旅行准备 准备邮轮上需要携带的物品 浏览日本免税店的物品 购买蓝宝石公主号七月一日的船票]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my-first-blog]]></title>
    <url>%2F2018%2F04%2F29%2Fmy-first-blog%2F</url>
    <content type="text"><![CDATA[前言使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等；]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F04%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
